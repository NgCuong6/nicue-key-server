#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from utils import LoadingAnimation, animate_text, clear_screen
import os
import sys
import time
import random
import string
import json
import hashlib
import requests
import threading
import platform
import base64
import subprocess
from datetime import datetime, timedelta
from PIL import Image

try:
    import UnityPy
except ImportError:
    print("Installing UnityPy...")
    os.system("pip install UnityPy")
    import UnityPy

try:
    import pyperclip
except ImportError:
    print("Installing pyperclip...")
    os.system("pip install pyperclip")
    import pyperclip

# ================= KEY VERIFY & LINK4M ==================
SERVER_URL = "https://nicue-key-server.onrender.com"  # Your Render.com URL
LINK4M_API_KEY = "66e285b661103a61730450f9"  # API key Link4m
API_BASE_URL = f"{SERVER_URL}"  # Base URL for all API calls

# Danh s√°ch c√°c link shortener
SHORTENERS = {
    "Link4M": {
        "name": "Link4M",
        "api_url": "https://link4m.co/api-shorten/v2",
        "api_key": LINK4M_API_KEY
    },
    "BoostLink": {
        "name": "BoostLink",
        "api_url": "https://boostlink.tk/api/v1/shorten",
        "api_key": "your_boostlink_api_key"
    },
    "ShortLink": {
        "name": "ShortLink",
        "api_url": "https://shortlink.com/api/v1/shorten",
        "api_key": "your_shortlink_api_key"
    }
}

# Link shortener hi·ªán t·∫°i
CURRENT_SHORTENER = "Link4M"

def change_shortener():
    """Thay ƒë·ªïi d·ªãch v·ª• r√∫t g·ªçn link"""
    global CURRENT_SHORTENER
    
    print(f"\n{Colors.BLUE}‚ï≠{'‚ïê' * 50}‚ïÆ{Colors.RESET}")
    print(f"{Colors.BLUE}‚îÇ{Colors.RESET} {Colors.BOLD}{Colors.YELLOW}üîÑ CH·ªåN D·ªäCH V·ª§ R√öT G·ªåN LINK{Colors.RESET}".center(60) + f"{Colors.BLUE}‚îÇ{Colors.RESET}")
    print(f"{Colors.BLUE}‚îú{'‚ïê' * 50}‚î§{Colors.RESET}")
    
    # Hi·ªÉn th·ªã danh s√°ch c√°c d·ªãch v·ª•
    for i, (key, service) in enumerate(SHORTENERS.items(), 1):
        status = "‚úÖ ƒêang s·ª≠ d·ª•ng" if key == CURRENT_SHORTENER else ""
        print(f"{Colors.BLUE}‚îÇ{Colors.RESET} {Colors.CYAN}{i}.{Colors.RESET} {Colors.WHITE}{service['name']}{Colors.RESET} {Colors.GREEN}{status}{Colors.RESET}".ljust(58) + f"{Colors.BLUE}‚îÇ{Colors.RESET}")
    
    print(f"{Colors.BLUE}‚îÇ{Colors.RESET} {Colors.RED}0.{Colors.RESET} {Colors.WHITE}Quay l·∫°i{Colors.RESET}".ljust(58) + f"{Colors.BLUE}‚îÇ{Colors.RESET}")
    print(f"{Colors.BLUE}‚ï∞{'‚ïê' * 50}‚ïØ{Colors.RESET}")
    
    while True:
        try:
            choice = input(f"\n{Colors.YELLOW}üëâ Nh·∫≠p l·ª±a ch·ªçn c·ªßa b·∫°n: {Colors.RESET}").strip()
            
            if choice == "0":
                return False
                
            if choice.isdigit():
                idx = int(choice)
                if 1 <= idx <= len(SHORTENERS):
                    new_shortener = list(SHORTENERS.keys())[idx-1]
                    if new_shortener == CURRENT_SHORTENER:
                        print(f"{Colors.YELLOW}‚ö†Ô∏è B·∫°n ƒëang s·ª≠ d·ª•ng d·ªãch v·ª• n√†y!{Colors.RESET}")
                    else:
                        CURRENT_SHORTENER = new_shortener
                        print(f"{Colors.GREEN}‚úÖ ƒê√£ ƒë·ªïi sang {SHORTENERS[new_shortener]['name']}!{Colors.RESET}")
                    return True
            
            print(f"{Colors.RED}‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!{Colors.RESET}")
            
        except Exception as e:
            print(f"{Colors.RED}‚ùå L·ªói: {str(e)}{Colors.RESET}")
            return False

def create_shortlink() -> str:
    """T·∫°o link r√∫t g·ªçn qua API c·ªßa d·ªãch v·ª• hi·ªán t·∫°i"""
    try:
        # URL g·ªëc c·ªßa endpoint generate 
        destination_url = f"{API_BASE_URL}/generate"
        
        # URL encode the destination URL
        from urllib.parse import quote
        encoded_url = quote(destination_url)
        
        # L·∫•y th√¥ng tin shortener hi·ªán t·∫°i
        shortener = SHORTENERS[CURRENT_SHORTENER]
        
        # T·∫°o API request theo ƒë·ªãnh d·∫°ng c·ªßa t·ª´ng d·ªãch v·ª•
        if CURRENT_SHORTENER == "Link4M":
            api_url = f"{shortener['api_url']}?api={shortener['api_key']}&url={encoded_url}"
            print(f"{Colors.YELLOW}‚è≥ ƒêang t·∫°o link r√∫t g·ªçn qua {shortener['name']}...{Colors.RESET}")
            response = requests.get(api_url, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                # In ra response ƒë·ªÉ debug
                print(f"{Colors.YELLOW}üìù API Response: {data}{Colors.RESET}")
                if 'status' in data and data['status'] == 'success':
                    short_url = data.get('shortenedUrl') or data.get('shorturl') or data.get('url')
                    if short_url:
                        print(f"{Colors.GREEN}‚úÖ T·∫°o link r√∫t g·ªçn th√†nh c√¥ng!{Colors.RESET}")
                        print(f"{Colors.CYAN}üîó Link: {short_url}{Colors.RESET}")
                        return short_url
                else:
                    print(f"{Colors.YELLOW}‚ö†Ô∏è API tr·∫£ v·ªÅ l·ªói: {data.get('message', 'Unknown error')}{Colors.RESET}")
                    
        elif CURRENT_SHORTENER == "BoostLink":
            data = {
                "api": shortener['api_key'],
                "url": destination_url
            }
            print(f"{Colors.YELLOW}‚è≥ ƒêang t·∫°o link r√∫t g·ªçn qua {shortener['name']}...{Colors.RESET}")
            response = requests.post(shortener['api_url'], json=data, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                if data.get('status') == 'success':
                    short_url = data.get('short_url')
                    print(f"{Colors.GREEN}‚úÖ T·∫°o link r√∫t g·ªçn th√†nh c√¥ng!{Colors.RESET}")
                    print(f"{Colors.CYAN}üîó Link: {short_url}{Colors.RESET}")
                    return short_url
                else:
                    print(f"{Colors.YELLOW}‚ö†Ô∏è API tr·∫£ v·ªÅ l·ªói: {data.get('message', 'Unknown error')}{Colors.RESET}")
                    
        elif CURRENT_SHORTENER == "ShortLink":
            headers = {
                "Authorization": f"Bearer {shortener['api_key']}"
            }
            data = {
                "url": destination_url
            }
            print(f"{Colors.YELLOW}‚è≥ ƒêang t·∫°o link r√∫t g·ªçn qua {shortener['name']}...{Colors.RESET}")
            response = requests.post(shortener['api_url'], headers=headers, json=data, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                if data.get('status') == 'success':
                    short_url = data.get('short_url')
                    print(f"{Colors.GREEN}‚úÖ T·∫°o link r√∫t g·ªçn th√†nh c√¥ng!{Colors.RESET}")
                    print(f"{Colors.CYAN}üîó Link: {short_url}{Colors.RESET}")
                    return short_url
                else:
                    print(f"{Colors.YELLOW}‚ö†Ô∏è API tr·∫£ v·ªÅ l·ªói: {data.get('message', 'Unknown error')}{Colors.RESET}")
        
        # N·∫øu c√≥ l·ªói ho·∫∑c d·ªãch v·ª• kh√¥ng h·ªó tr·ª£, tr·∫£ v·ªÅ URL g·ªëc
        print(f"{Colors.YELLOW}‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫°o link r√∫t g·ªçn, s·ª≠ d·ª•ng URL g·ªëc{Colors.RESET}")
        print(f"{Colors.CYAN}üîó Link g·ªëc: {destination_url}{Colors.RESET}")
        return destination_url
        
    except Exception as e:
        print(f"{Colors.RED}‚ùå L·ªói khi g·ªçi API: {str(e)}{Colors.RESET}")
        return destination_url
    try:
        # URL g·ªëc c·ªßa endpoint generate
        destination_url = f"{API_BASE_URL}/generate"
        
        # URL encode the destination URL
        from urllib.parse import quote
        encoded_url = quote(destination_url)
        
        # URL API Link4M
        api_url = f"https://link4m.co/api-shorten/v2?api={LINK4M_API_KEY}&url={encoded_url}"
        
        # G·ªçi API Link4m
        print(f"{Colors.YELLOW}‚è≥ ƒêang t·∫°o link r√∫t g·ªçn...{Colors.RESET}")
        response = requests.get(api_url, timeout=10)
        
        if response.status_code == 200:
            try:
                data = response.json()
                if data.get('status') == 'success' and data.get('shortenedUrl'):
                    short_url = data.get('shortenedUrl')
                    print(f"{Colors.GREEN}‚úÖ T·∫°o link r√∫t g·ªçn th√†nh c√¥ng!{Colors.RESET}")
                    print(f"{Colors.CYAN}üîó Link: {short_url}{Colors.RESET}")
                    return short_url
                else:
                    error_msg = data.get('message', 'Unknown error')
                    print(f"{Colors.YELLOW}‚ö†Ô∏è API tr·∫£ v·ªÅ l·ªói: {error_msg}{Colors.RESET}")
            except Exception as e:
                print(f"{Colors.YELLOW}‚ö†Ô∏è L·ªói khi x·ª≠ l√Ω response: {str(e)}{Colors.RESET}")
                print(f"{Colors.YELLOW}üìù Response: {response.text}{Colors.RESET}")
        
        print(f"{Colors.YELLOW}‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫°o link r√∫t g·ªçn, s·ª≠ d·ª•ng URL g·ªëc{Colors.RESET}")
        print(f"{Colors.CYAN}üîó Link g·ªëc: {destination_url}{Colors.RESET}")
        return destination_url
        
    except Exception as e:
        print(f"{Colors.RED}‚ùå L·ªói khi g·ªçi API: {str(e)}{Colors.RESET}")
        return destination_url

def get_key_link():
    """T·∫°o v√† hi·ªÉn th·ªã link l·∫•y key v·ªõi giao di·ªán ƒë·∫πp"""
    print(f"\n{Colors.CYAN}‚ïî{'‚ïê' * 70}‚ïó{Colors.RESET}")
    print(f"{Colors.CYAN}‚ïë{Colors.RESET} {Colors.BOLD}{Colors.YELLOW}üîë NICUE MOD - H·ªÜ TH·ªêNG KEY üîë{Colors.RESET}".center(80) + f"{Colors.CYAN}‚ïë{Colors.RESET}")
    print(f"{Colors.CYAN}‚ï†{'‚ïê' * 70}‚ï£{Colors.RESET}")
    
    # Show key information
    print(f"{Colors.CYAN}‚ïë{Colors.RESET} {Colors.WHITE}‚è≥ Th·ªùi h·∫°n key: {Colors.GREEN}20 ph√∫t{Colors.RESET}".ljust(79) + f"{Colors.CYAN}‚ïë{Colors.RESET}")
    print(f"{Colors.CYAN}‚ïë{Colors.RESET} {Colors.WHITE}üí∞ Gi√° key: {Colors.YELLOW}FREE{Colors.RESET}".ljust(79) + f"{Colors.CYAN}‚ïë{Colors.RESET}")
    print(f"{Colors.CYAN}‚ïë{Colors.RESET} {Colors.WHITE}üîí B·∫£o m·∫≠t: {Colors.RED}Link4M Verification{Colors.RESET}".ljust(79) + f"{Colors.CYAN}‚ïë{Colors.RESET}")
    print(f"{Colors.CYAN}‚ïë{Colors.RESET} {Colors.WHITE}üõ°Ô∏è Ch·ªëng: {Colors.RED}Reset/Bypass/Crack{Colors.RESET}".ljust(79) + f"{Colors.CYAN}‚ïë{Colors.RESET}")
    print(f"{Colors.CYAN}‚ï†{'‚ïê' * 70}‚ï£{Colors.RESET}")
    
    # Show tool information
    print(f"{Colors.CYAN}‚ïë{Colors.RESET} {Colors.BOLD}{Colors.YELLOW}üõ†Ô∏è TH√îNG TIN TOOL{Colors.RESET}".center(80) + f"{Colors.CYAN}‚ïë{Colors.RESET}")
    print(f"{Colors.CYAN}‚ïë{Colors.RESET} {Colors.WHITE}‚Ä¢ T√™n: NICUE MOD TOOL{Colors.RESET}".ljust(79) + f"{Colors.CYAN}‚ïë{Colors.RESET}")
    print(f"{Colors.CYAN}‚ïë{Colors.RESET} {Colors.WHITE}‚Ä¢ Phi√™n b·∫£n: 2.0{Colors.RESET}".ljust(79) + f"{Colors.CYAN}‚ïë{Colors.RESET}")
    print(f"{Colors.CYAN}‚ïë{Colors.RESET} {Colors.WHITE}‚Ä¢ T√°c gi·∫£: Nguy·ªÖn Trung C∆∞·ªùng{Colors.RESET}".ljust(79) + f"{Colors.CYAN}‚ïë{Colors.RESET}")
    print(f"{Colors.CYAN}‚ïë{Colors.RESET} {Colors.WHITE}‚Ä¢ B·∫£n quy·ªÅn ¬© 2025 NiCue Mod{Colors.RESET}".ljust(79) + f"{Colors.CYAN}‚ïë{Colors.RESET}")
    print(f"{Colors.CYAN}‚ï†{'‚ïê' * 70}‚ï£{Colors.RESET}")

    print(f"{Colors.CYAN}‚ïë{Colors.RESET} {Colors.BOLD}{Colors.YELLOW}üéÆ T√çNH NƒÇNG{Colors.RESET}".center(80) + f"{Colors.CYAN}‚ïë{Colors.RESET}")
    print(f"{Colors.CYAN}‚ïë{Colors.RESET} {Colors.WHITE}‚Ä¢ Mod keo Free Fire MAX & TH{Colors.RESET}".ljust(79) + f"{Colors.CYAN}‚ïë{Colors.RESET}")
    print(f"{Colors.CYAN}‚ïë{Colors.RESET} {Colors.WHITE}‚Ä¢ H·ªó tr·ª£ nhi·ªÅu lo·∫°i keo kh√°c nhau{Colors.RESET}".ljust(79) + f"{Colors.CYAN}‚ïë{Colors.RESET}")
    print(f"{Colors.CYAN}‚ïë{Colors.RESET} {Colors.WHITE}‚Ä¢ T·ª± ƒë·ªông t·ªëi ∆∞u ch·∫•t l∆∞·ª£ng ·∫£nh{Colors.RESET}".ljust(79) + f"{Colors.CYAN}‚ïë{Colors.RESET}")
    print(f"{Colors.CYAN}‚ï†{'‚ïê' * 70}‚ï£{Colors.RESET}")
    
    print(f"{Colors.CYAN}‚ïë{Colors.RESET} {Colors.BOLD}{Colors.YELLOW}‚ö° ƒêANG T·∫†O LINK B·∫¢O M·∫¨T...{Colors.RESET}".center(80) + f"{Colors.CYAN}‚ïë{Colors.RESET}")
    
    # T·∫°o link r√∫t g·ªçn v·ªõi d·ªãch v·ª• hi·ªán t·∫°i
    short_link = create_shortlink()
    
    print(f"\n{Colors.GREEN}‚ïî{'‚ïê' * 70}‚ïó{Colors.RESET}")
    print(f"{Colors.GREEN}‚ïë{Colors.RESET} {Colors.BOLD}{Colors.YELLOW}‚úÖ LINK B·∫¢O M·∫¨T ƒê√É S·∫¥N S√ÄNG!{Colors.RESET}".center(80) + f"{Colors.GREEN}‚ïë{Colors.RESET}")
    print(f"{Colors.GREEN}‚ï†{'‚ïê' * 70}‚ï£{Colors.RESET}")
    print(f"{Colors.GREEN}‚ïë{Colors.RESET} {Colors.BOLD}üîó Link L·∫•y Key:{Colors.RESET}".ljust(79) + f"{Colors.GREEN}‚ïë{Colors.RESET}")
    print(f"{Colors.GREEN}‚ïë{Colors.RESET} {Colors.CYAN}{short_link}{Colors.RESET}".ljust(79) + f"{Colors.GREEN}‚ïë{Colors.RESET}")
    print(f"{Colors.GREEN}‚ï†{'‚ïê' * 70}‚ï£{Colors.RESET}")
    
    # Instructions
    print(f"{Colors.GREEN}‚ïë{Colors.RESET} {Colors.BOLD}üìã H∆Ø·ªöNG D·∫™N:{Colors.RESET}".center(80) + f"{Colors.GREEN}‚ïë{Colors.RESET}")
    print(f"{Colors.GREEN}‚ïë{Colors.RESET} {Colors.WHITE}1. Copy link l·∫•y key ·ªü tr√™n{Colors.RESET}".ljust(79) + f"{Colors.GREEN}‚ïë{Colors.RESET}")
    print(f"{Colors.GREEN}‚ïë{Colors.RESET} {Colors.WHITE}2. V∆∞·ª£t link Link4M ƒë·ªÉ l·∫•y key{Colors.RESET}".ljust(79) + f"{Colors.GREEN}‚ïë{Colors.RESET}")
    print(f"{Colors.GREEN}‚ïë{Colors.RESET} {Colors.WHITE}3. Key s·∫Ω hi·ªán sau khi v∆∞·ª£t link th√†nh c√¥ng{Colors.RESET}".ljust(79) + f"{Colors.GREEN}‚ïë{Colors.RESET}")
    print(f"{Colors.GREEN}‚ï†{'‚ïê' * 70}‚ï£{Colors.RESET}")
    
    # Warnings
    print(f"{Colors.GREEN}‚ïë{Colors.RESET} {Colors.BOLD}{Colors.RED}‚ö†Ô∏è L∆ØU √ù QUAN TR·ªåNG:{Colors.RESET}".ljust(79) + f"{Colors.GREEN}‚ïë{Colors.RESET}")
    print(f"{Colors.GREEN}‚ïë{Colors.RESET} {Colors.WHITE}‚Ä¢ Key ch·ªâ c√≥ hi·ªáu l·ª±c trong 20 ph√∫t{Colors.RESET}".ljust(79) + f"{Colors.GREEN}‚ïë{Colors.RESET}")
    print(f"{Colors.GREEN}‚ïë{Colors.RESET} {Colors.WHITE}‚Ä¢ M·ªói IP ch·ªâ ƒë∆∞·ª£c l·∫•y 1 key trong 20 ph√∫t{Colors.RESET}".ljust(79) + f"{Colors.GREEN}‚ïë{Colors.RESET}")
    print(f"{Colors.GREEN}‚ïë{Colors.RESET} {Colors.WHITE}‚Ä¢ Kh√¥ng reset/bypass ƒë·ªÉ l·∫•y key m·ªõi{Colors.RESET}".ljust(79) + f"{Colors.GREEN}‚ïë{Colors.RESET}")
    print(f"{Colors.GREEN}‚ïë{Colors.RESET} {Colors.WHITE}‚Ä¢ Qu√° th·ªùi h·∫°n key s·∫Ω t·ª± ƒë·ªông h·∫øt hi·ªáu l·ª±c{Colors.RESET}".ljust(79) + f"{Colors.GREEN}‚ïë{Colors.RESET}")
    print(f"{Colors.GREEN}‚ï†{'‚ïê' * 70}‚ï£{Colors.RESET}")
    
    # Contact info
    print(f"{Colors.GREEN}‚ïë{Colors.RESET} {Colors.MAGENTA}üí¨ LI√äN H·ªÜ H·ªñ TR·ª¢:{Colors.RESET}".center(80) + f"{Colors.GREEN}‚ïë{Colors.RESET}")
    print(f"{Colors.GREEN}‚ïë{Colors.RESET} {Colors.WHITE}‚Ä¢ Zalo: 0349667922{Colors.RESET}".ljust(79) + f"{Colors.GREEN}‚ïë{Colors.RESET}")
    print(f"{Colors.GREEN}‚ïë{Colors.RESET} {Colors.WHITE}‚Ä¢ Youtube: NiCue Mod{Colors.RESET}".ljust(79) + f"{Colors.GREEN}‚ïë{Colors.RESET}")
    print(f"{Colors.GREEN}‚ïö{'‚ïê' * 70}‚ïù{Colors.RESET}")
    
    # Try to copy link to clipboard
    try:
        pyperclip.copy(short_link)
        print(f"\n{Colors.GREEN}‚úÖ ƒê√£ copy link v√†o clipboard!{Colors.RESET}")
    except:
        print(f"\n{Colors.YELLOW}üí° Tip: C√†i pyperclip ƒë·ªÉ t·ª± ƒë·ªông copy link{Colors.RESET}")
    
    return short_link
    
    print(f"{Colors.CYAN}‚ïë{Colors.RESET} {Colors.BOLD}{Colors.GREEN}‚úÖ LINK L·∫§Y KEY ƒê√É S·∫¥N S√ÄNG!{Colors.RESET}".center(80) + f"{Colors.CYAN}‚ïë{Colors.RESET}")
    print(f"{Colors.CYAN}‚ï†{'‚ïê' * 70}‚ï£{Colors.RESET}")
    print(f"{Colors.CYAN}‚ïë{Colors.RESET} {Colors.BOLD}üîó Link L·∫•y Key:{Colors.RESET}".ljust(79) + f"{Colors.CYAN}‚ïë{Colors.RESET}")
    print(f"{Colors.CYAN}‚ïë{Colors.RESET} {Colors.CYAN}{redirect_url}{Colors.RESET}".ljust(79) + f"{Colors.CYAN}‚ïë{Colors.RESET}")
    print(f"{Colors.CYAN}‚ï†{'‚ïê' * 70}‚ï£{Colors.RESET}")
    
    # Instructions
    print(f"{Colors.CYAN}‚ïë{Colors.RESET} {Colors.BOLD}üìã H∆Ø·ªöNG D·∫™N:{Colors.RESET}".center(80) + f"{Colors.CYAN}‚ïë{Colors.RESET}")
    print(f"{Colors.CYAN}‚ïë{Colors.RESET} {Colors.WHITE}1. Copy link l·∫•y key ·ªü tr√™n{Colors.RESET}".ljust(79) + f"{Colors.CYAN}‚ïë{Colors.RESET}")
    print(f"{Colors.CYAN}‚ïë{Colors.RESET} {Colors.WHITE}2. M·ªü link v√† v∆∞·ª£t Link4M ƒë·ªÉ l·∫•y key{Colors.RESET}".ljust(79) + f"{Colors.CYAN}‚ïë{Colors.RESET}")
    print(f"{Colors.CYAN}‚ïë{Colors.RESET} {Colors.WHITE}3. Key s·∫Ω hi·ªán sau khi v∆∞·ª£t link th√†nh c√¥ng{Colors.RESET}".ljust(79) + f"{Colors.CYAN}‚ïë{Colors.RESET}")
    print(f"{Colors.CYAN}‚ï†{'‚ïê' * 70}‚ï£{Colors.RESET}")
    
    # Warnings
    print(f"{Colors.CYAN}‚ïë{Colors.RESET} {Colors.BOLD}{Colors.RED}‚ö†Ô∏è L∆ØU √ù:{Colors.RESET}".ljust(79) + f"{Colors.CYAN}‚ïë{Colors.RESET}")
    print(f"{Colors.CYAN}‚ïë{Colors.RESET} {Colors.WHITE}‚Ä¢ Key ch·ªâ c√≥ hi·ªáu l·ª±c trong 12 gi·ªù{Colors.RESET}".ljust(79) + f"{Colors.CYAN}‚ïë{Colors.RESET}")
    print(f"{Colors.CYAN}‚ïë{Colors.RESET} {Colors.WHITE}‚Ä¢ Kh√¥ng reset/bypass ƒë·ªÉ l·∫•y key m·ªõi{Colors.RESET}".ljust(79) + f"{Colors.CYAN}‚ïë{Colors.RESET}")
    print(f"{Colors.CYAN}‚ïë{Colors.RESET} {Colors.WHITE}‚Ä¢ Tool t·ª± ƒë·ªông ki·ªÉm tra key h·ª£p l·ªá{Colors.RESET}".ljust(79) + f"{Colors.CYAN}‚ïë{Colors.RESET}")
    print(f"{Colors.CYAN}‚ï†{'‚ïê' * 70}‚ï£{Colors.RESET}")
    
    # Contact info
    print(f"{Colors.CYAN}‚ïë{Colors.RESET} {Colors.MAGENTA}üí¨ LI√äN H·ªÜ H·ªñ TR·ª¢:{Colors.RESET}".center(80) + f"{Colors.CYAN}‚ïë{Colors.RESET}")
    print(f"{Colors.CYAN}‚ïë{Colors.RESET} {Colors.WHITE}‚Ä¢ Zalo: 0349667922{Colors.RESET}".ljust(79) + f"{Colors.CYAN}‚ïë{Colors.RESET}")
    print(f"{Colors.CYAN}‚ïë{Colors.RESET} {Colors.WHITE}‚Ä¢ Youtube: NiCue Mod{Colors.RESET}".ljust(79) + f"{Colors.CYAN}‚ïë{Colors.RESET}")
    print(f"{Colors.CYAN}‚ïö{'‚ïê' * 70}‚ïù{Colors.RESET}")
    
    # Try to copy link to clipboard
    try:
        pyperclip.copy(redirect_url)
        print(f"\n{Colors.GREEN}‚úÖ ƒê√£ copy link v√†o clipboard!{Colors.RESET}")
    except:
        print(f"\n{Colors.YELLOW}üí° Tip: C√†i pyperclip ƒë·ªÉ t·ª± ƒë·ªông copy link{Colors.RESET}")
    
    return redirect_url

def check_key(key: str) -> bool:
    """Ki·ªÉm tra key c√≥ h·ª£p l·ªá kh√¥ng"""
    try:
        # First verify locally
        if not key or len(key) < 20:  # Updated key length check
            print(f"\n{Colors.RED}‚ùå Key kh√¥ng h·ª£p l·ªá!{Colors.RESET}")
            return False

        # Get hardware ID
        import uuid
        hw_id = str(uuid.getnode())
            
        # Verify with server
        headers = {
            'Content-Type': 'application/json',
            'X-Hardware-ID': hw_id
        }
        
        verify_url = f"{API_BASE_URL}/verify"
        response = requests.post(
            verify_url, 
            json={'key': key},
            headers=headers,
            timeout=10
        )
        
        if response.status_code != 200:
            error_data = response.json()
            print(f"\n{Colors.RED}‚ùå {error_data.get('message', 'Key kh√¥ng h·ª£p l·ªá!')}{Colors.RESET}")
            return False
            
        data = response.json()
        if data.get('status') == 'ok':
            remaining = data.get('expires_in', 0)
            remaining_minutes = int(remaining / 60)
            print(f"\n{Colors.GREEN}‚úÖ Key h·ª£p l·ªá!{Colors.RESET}")
            print(f"{Colors.YELLOW}‚è≥ Th·ªùi gian c√≤n l·∫°i: {remaining_minutes} ph√∫t{Colors.RESET}")
            
            # Store tool config if provided
            tool_config = data.get('tool_config', {})
            if tool_config:
                print(f"\n{Colors.CYAN}üîÑ ƒêang c·∫≠p nh·∫≠t c·∫•u h√¨nh tool...{Colors.RESET}")
                # You can save tool_config here for later use
                
            return True
        
        print(f"\n{Colors.RED}‚ùå Key kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n!{Colors.RESET}")
        return False
        
    except Exception as e:
        print(f"\n{Colors.RED}‚ùå L·ªói khi ki·ªÉm tra key: {str(e)}{Colors.RESET}")
        return False
            
        # Then verify with server
        resp = requests.get(f"{SERVER_URL}/verify/{key}", timeout=5)
        data = resp.json()
        
        if data.get("status") == "error":
            error_msg = data.get('message', 'Unknown error')
            print(f"\n{Colors.RED}‚ïî{'‚ïê' * 45}‚ïó{Colors.RESET}")
            print(f"{Colors.RED}‚ïë{Colors.RESET} {Colors.BOLD}{Colors.WHITE}‚ùå L·ªñI X√ÅC TH·ª∞C KEY!{Colors.RESET}".center(55) + f"{Colors.RED}‚ïë{Colors.RESET}")
            print(f"{Colors.RED}‚ï†{'‚ïê' * 45}‚ï£{Colors.RESET}")
            print(f"{Colors.RED}‚ïë{Colors.RESET} {Colors.WHITE}{error_msg}{Colors.RESET}".ljust(55) + f"{Colors.RED}‚ïë{Colors.RESET}")
            
            if "expired" in error_msg.lower():
                print(f"{Colors.RED}‚ïë{Colors.RESET} {Colors.WHITE}Vui l√≤ng l·∫•y key m·ªõi ƒë·ªÉ ti·∫øp t·ª•c{Colors.RESET}".ljust(55) + f"{Colors.RED}‚ïë{Colors.RESET}")
            elif "not found" in error_msg.lower():
                print(f"{Colors.RED}‚ïë{Colors.RESET} {Colors.WHITE}Key kh√¥ng t·ªìn t·∫°i ho·∫∑c ch∆∞a v∆∞·ª£t link{Colors.RESET}".ljust(55) + f"{Colors.RED}‚ïë{Colors.RESET}")
            
            print(f"{Colors.RED}‚ïö{'‚ïê' * 45}‚ïù{Colors.RESET}")
            return False
            
        if data.get("status") == "ok":
            expires_in = data.get("expires_in", 0)
            print(f"\n{Colors.GREEN}‚ïî{'‚ïê' * 45}‚ïó{Colors.RESET}")
            print(f"{Colors.GREEN}‚ïë{Colors.RESET} {Colors.BOLD}{Colors.YELLOW}‚úÖ X√ÅC TH·ª∞C TH√ÄNH C√îNG!{Colors.RESET}".center(55) + f"{Colors.GREEN}‚ïë{Colors.RESET}")
            print(f"{Colors.GREEN}‚ï†{'‚ïê' * 45}‚ï£{Colors.RESET}")
            print(f"{Colors.GREEN}‚ïë{Colors.RESET} {Colors.WHITE}‚Ä¢ Key c√≤n hi·ªáu l·ª±c: {expires_in} ph√∫t{Colors.RESET}".ljust(55) + f"{Colors.GREEN}‚ïë{Colors.RESET}")
            print(f"{Colors.GREEN}‚ïë{Colors.RESET} {Colors.WHITE}‚Ä¢ IP c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ghi nh·∫≠n{Colors.RESET}".ljust(55) + f"{Colors.GREEN}‚ïë{Colors.RESET}")
            print(f"{Colors.GREEN}‚ïö{'‚ïê' * 45}‚ïù{Colors.RESET}")
            return True
            
        return False
    except Exception as e:
        print(f"\n{Colors.RED}‚ùå Kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c server: {e}{Colors.RESET}")
        return False

# ================== M√ÄU S·∫ÆC ===================
class Colors:
    RED = "\033[91m"
    GREEN = "\033[92m"
    YELLOW = "\033[93m"
    BLUE = "\033[94m"
    MAGENTA = "\033[95m"
    CYAN = "\033[96m"
    WHITE = "\033[97m"
    RESET = "\033[0m"
    BOLD = "\033[1m"
    DIM = "\033[2m"

# ================== TOOL MOD ==================
class NiCueModTool:
    def __init__(self):
        # C·∫•u h√¨nh t·∫•t c·∫£ file v·ªõi t√™n m·ªõi v√† texture
        self.file_configs = {
            "optionalab_weapon_068.taWKWMEe462YVhaYmP6~2Fq07NIV8~3D": {
                "name": "File Truy·ªán Tranh & C√¥n Tr√πng",
                "textures": [
                    "IceWall_Bunker_New_Rank44_D",
                    "IceWall_Bunker_New_CSRank30_D"
                ],
                "max_name": "optionalab_weapon_068.wK6Wcwor2D8pjjzCkSIAPIldo7c~3D"
            },
            "optionalab_weapon_038.xn3C2MskfGbGot82Dz2fJQ54M4g~3D": {
                "name": "Keo Tanjiro",
                "textures": ["IceWall_Bunker_New_DS_green_D"],
                "max_name": "optionalab_weapon_038.dYO4hfQMcF~2BGYHqQxLGGsRnIGys~3D"
            },
            "optionalab_weapon_058.lFsWlMele5d4X5aw6RBLchSdjgo~3D": {
                "name": "Keo Booya",
                "textures": ["IceWall_Bunker_New_Booyahday24_Team_D"],
                "max_name": "optionalab_weapon_058.hxAcEvqNDnVv0ahYZtQ7rBQhPgc~3D"
            },
            "optionalab_weapon_054.PZEaSpjxrnFlozy~2Bs9hos3qj6xo~3D": {
                "name": "Keo 7 Tu·ªïi",
                "textures": ["IceWall_Bunker_New_Spirit24_D"],
                "max_name": "optionalab_weapon_054.RTLN0jSaLvRttCJ2g8DS8uPx7NQ~3D"
            },
            "optionalab_weapon_060.k18kfeCBi8x8CHn~2B5l9tBrYEcRM~3D": {
                "name": "Keo H√† M√£",
                "textures": ["IceWall_Bunker_New_Hippo_D"],
                "max_name": "optionalab_weapon_060.MmoGsHpdq5URHWzr4AL3F~2F9hBmY~3D"
            }
        }
        
        # ƒê∆∞·ªùng d·∫´n game
        self.game_paths = {
            "TH": "com.dts.freefireth\\com.dts.freefireth\\files\\contentcache\\Optional\\android\\gameassetbundles",
            "MAX": "com.dts.freefiremax\\files\\contentcache\\Optional\\android\\gameassetbundles"
        }
        
        # Qu√©t file c√≥ s·∫µn
        self.available_files = [f for f in self.file_configs if os.path.exists(f)]
        
        # T·∫°o th∆∞ m·ª•c images n·∫øu ch∆∞a c√≥
        if not os.path.exists('images'):
            os.makedirs('images')

    def print_header(self):
        """In header tool v·ªõi giao di·ªán ƒë·∫πp"""
        print(Colors.CYAN + "‚ïî" + "‚ïê" * 58 + "‚ïó" + Colors.RESET)
        print(Colors.CYAN + "‚ïë" + Colors.YELLOW + Colors.BOLD + 
              "üî• NICUE MOD TOOL - FREE FIRE MODDING üî•".center(58) + 
              Colors.RESET + Colors.CYAN + "‚ïë" + Colors.RESET)
        print(Colors.CYAN + "‚ïë" + Colors.WHITE + 
              "C√¥ng c·ª• mod Free Fire chuy√™n nghi·ªáp".center(58) + 
              Colors.RESET + Colors.CYAN + "‚ïë" + Colors.RESET)
        print(Colors.CYAN + "‚ï†" + "‚ïê" * 58 + "‚ï£" + Colors.RESET)
        print(Colors.CYAN + "‚ïë" + Colors.GREEN + Colors.BOLD +
              "üë§ Author: Nguy·ªÖn Trung C∆∞·ªùng".center(58) + 
              Colors.RESET + Colors.CYAN + "‚ïë" + Colors.RESET)
        print(Colors.CYAN + "‚ïë" + Colors.BLUE + 
              "üì± Zalo: 0349667922".center(58) + 
              Colors.RESET + Colors.CYAN + "‚ïë" + Colors.RESET)
        print(Colors.CYAN + "‚ïë" + Colors.RED + 
              "üì∫ Youtube: NiCue Mod".center(58) + 
              Colors.RESET + Colors.CYAN + "‚ïë" + Colors.RESET)
        print(Colors.CYAN + "‚ïö" + "‚ïê" * 58 + "‚ïù" + Colors.RESET)

    def get_image_path(self, texture_name):
        """L·∫•y ƒë∆∞·ªùng d·∫´n ·∫£nh v·ªõi giao di·ªán ƒë·∫πp"""
        print(f"\n{Colors.BLUE}‚ï≠‚îÄ{'‚îÄ' * 50}‚îÄ‚ïÆ{Colors.RESET}")
        print(f"{Colors.BLUE}‚îÇ{Colors.RESET} {Colors.BOLD}{Colors.YELLOW}üé® CH·ªåN ·∫¢NH CHO: {texture_name}{Colors.RESET}".ljust(65) + f"{Colors.BLUE}‚îÇ{Colors.RESET}")
        print(f"{Colors.BLUE}‚îú‚îÄ{'‚îÄ' * 50}‚îÄ‚î§{Colors.RESET}")
        print(f"{Colors.BLUE}‚îÇ{Colors.RESET} {Colors.CYAN}‚Ä¢ K√©o th·∫£ ·∫£nh v√†o ƒë√¢y{Colors.RESET}".ljust(60) + f"{Colors.BLUE}‚îÇ{Colors.RESET}")
        print(f"{Colors.BLUE}‚îÇ{Colors.RESET} {Colors.CYAN}‚Ä¢ Ho·∫∑c nh·∫≠p ƒë∆∞·ªùng d·∫´n ƒë·∫ßy ƒë·ªß{Colors.RESET}".ljust(60) + f"{Colors.BLUE}‚îÇ{Colors.RESET}")
        
        # Hi·ªÉn th·ªã ·∫£nh trong th∆∞ m·ª•c images n·∫øu c√≥
        images = [f for f in os.listdir('images') if f.lower().endswith(('.png', '.jpg', '.jpeg', '.bmp'))]
        if images:
            print(f"{Colors.BLUE}‚îÇ{Colors.RESET} {Colors.CYAN}‚Ä¢ Ho·∫∑c ch·ªçn t·ª´ th∆∞ m·ª•c /images/:{Colors.RESET}".ljust(60) + f"{Colors.BLUE}‚îÇ{Colors.RESET}")
            print(f"{Colors.BLUE}‚îú‚îÄ{'‚îÄ' * 50}‚îÄ‚î§{Colors.RESET}")
            
            for i, img_name in enumerate(images, 1):
                print(f"{Colors.BLUE}‚îÇ{Colors.RESET} {Colors.WHITE}{i}. {img_name}{Colors.RESET}".ljust(60) + f"{Colors.BLUE}‚îÇ{Colors.RESET}")
    
        print(f"{Colors.BLUE}‚ï∞‚îÄ{'‚îÄ' * 50}‚îÄ‚ïØ{Colors.RESET}")
        
        while True:
            path = input(f"\n{Colors.YELLOW}üëâ ƒê∆∞·ªùng d·∫´n ho·∫∑c s·ªë th·ª© t·ª±: {Colors.RESET}").strip().strip('"\'')
            
            # Ki·ªÉm tra n·∫øu l√† s·ªë th·ª© t·ª±
            if path.isdigit() and images:
                idx = int(path)
                if 1 <= idx <= len(images):
                    path = os.path.join('images', images[idx-1])
                else:
                    print(f"{Colors.RED}‚ùå S·ªë th·ª© t·ª± kh√¥ng h·ª£p l·ªá!{Colors.RESET}")
                    continue
            
            # Ki·ªÉm tra ƒë∆∞·ªùng d·∫´n file
            if not path:
                print(f"{Colors.RED}‚ùå Vui l√≤ng nh·∫≠p ƒë∆∞·ªùng d·∫´n ·∫£nh!{Colors.RESET}")
                continue
                
            if not os.path.exists(path):
                print(f"{Colors.RED}‚ùå Kh√¥ng t√¨m th·∫•y file: {path}{Colors.RESET}")
                continue
                
            if not path.lower().endswith(('.png', '.jpg', '.jpeg', '.bmp')):
                print(f"{Colors.RED}‚ùå File kh√¥ng ph·∫£i l√† ·∫£nh!{Colors.RESET}")
                continue
                
            print(f"{Colors.GREEN}‚úÖ ƒê√£ ch·ªçn: {os.path.basename(path)}{Colors.RESET}")
            return path

    def optimize_image(self, image_path, target_size):
        """T·ªëi ∆∞u ·∫£nh"""
        try:
            with Image.open(image_path) as img:
                # T·ªëi ∆∞u k√≠ch th∆∞·ªõc ·∫£nh
                img.thumbnail(target_size)
                return img
        except Exception as e:
            print(f"{Colors.RED}‚ùå L·ªói x·ª≠ l√Ω ·∫£nh: {e}{Colors.RESET}")
            return None

    def process_mod(self, asset_file, version):
        """X·ª≠ l√Ω mod file asset"""
        try:
            print(f"\n{Colors.CYAN}‚ïî{'‚ïê' * 50}‚ïó{Colors.RESET}")
            print(f"{Colors.CYAN}‚ïë{Colors.RESET} {Colors.BOLD}{Colors.YELLOW}‚öôÔ∏è ƒêANG X·ª¨ L√ù MOD...{Colors.RESET}".center(60) + f"{Colors.CYAN}‚ïë{Colors.RESET}")
            print(f"{Colors.CYAN}‚ï†{'‚ïê' * 50}‚ï£{Colors.RESET}")
            
            config = self.file_configs[asset_file]
            
            # Load file asset
            print(f"{Colors.CYAN}‚ïë{Colors.RESET} {Colors.WHITE}‚Ä¢ ƒêang ƒë·ªçc file asset...{Colors.RESET}".ljust(59) + f"{Colors.CYAN}‚ïë{Colors.RESET}")
            bundle = UnityPy.load(asset_file)
            
            # X·ª≠ l√Ω t·ª´ng texture
            print(f"{Colors.CYAN}‚ïë{Colors.RESET} {Colors.WHITE}‚Ä¢ ƒêang x·ª≠ l√Ω textures...{Colors.RESET}".ljust(59) + f"{Colors.CYAN}‚ïë{Colors.RESET}")
            
            for obj in bundle.objects:
                if obj.type.name == "Texture2D":
                    data = obj.read()
                    
                    # Ki·ªÉm tra n·∫øu texture c·∫ßn mod
                    if data.name in config['textures']:
                        print(f"{Colors.CYAN}‚ïë{Colors.RESET} {Colors.WHITE}  - X·ª≠ l√Ω {data.name}...{Colors.RESET}".ljust(59) + f"{Colors.CYAN}‚ïë{Colors.RESET}")
                        
                        # L·∫•y ƒë∆∞·ªùng d·∫´n ·∫£nh m·ªõi
                        img_path = self.get_image_path(data.name)
                        
                        # T·ªëi ∆∞u ·∫£nh
                        new_img = self.optimize_image(img_path, (data.width, data.height))
                        if new_img is None:
                            continue
                            
                        # C·∫≠p nh·∫≠t texture
                        data.image = new_img
                        data.save()
            
            # L∆∞u file ƒë√£ mod
            print(f"{Colors.CYAN}‚ïë{Colors.RESET} {Colors.WHITE}‚Ä¢ ƒêang l∆∞u file...{Colors.RESET}".ljust(59) + f"{Colors.CYAN}‚ïë{Colors.RESET}")
            
            # T·∫°o ƒë∆∞·ªùng d·∫´n game
            game_path = os.path.join(os.getenv('EXTERNAL_STORAGE', ''), 'Android/data', self.game_paths[version])
            
            if not os.path.exists(game_path):
                os.makedirs(game_path)
                
            # L∆∞u file v·ªõi t√™n m·ªõi
            output_path = os.path.join(game_path, config['max_name'])
            with open(output_path, 'wb') as f:
                f.write(bundle.file.save())
            
            print(f"{Colors.CYAN}‚ï†{'‚ïê' * 50}‚ï£{Colors.RESET}")
            print(f"{Colors.CYAN}‚ïë{Colors.RESET} {Colors.GREEN}‚úÖ MOD TH√ÄNH C√îNG!{Colors.RESET}".center(60) + f"{Colors.CYAN}‚ïë{Colors.RESET}")
            print(f"{Colors.CYAN}‚ïö{'‚ïê' * 50}‚ïù{Colors.RESET}")
            
            return True
            
        except Exception as e:
            print(f"{Colors.RED}‚ùå L·ªói: {str(e)}{Colors.RESET}")
            return False

    def check_files(self):
        """Ki·ªÉm tra c√°c file asset c√≥ s·∫µn"""
        if not self.available_files:
            print(f"\n{Colors.RED}‚ùå KH√îNG T√åM TH·∫§Y FILE ASSET!{Colors.RESET}")
            print(f"{Colors.YELLOW}üí° Vui l√≤ng copy c√°c file asset v√†o th∆∞ m·ª•c tool{Colors.RESET}")
            return False
        return True

    def show_file_menu(self):
        """Hi·ªÉn th·ªã menu ch·ªçn file ƒë·ªÉ mod"""
        while True:
            print(f"\n{Colors.BLUE}‚ï≠‚îÄ{'‚îÄ' * 50}‚îÄ‚ïÆ{Colors.RESET}")
            print(f"{Colors.BLUE}‚îÇ{Colors.RESET} {Colors.BOLD}{Colors.YELLOW}üìÇ CH·ªåN FILE MU·ªêN MOD{Colors.RESET}".center(65) + f"{Colors.BLUE}‚îÇ{Colors.RESET}")
            print(f"{Colors.BLUE}‚îú‚îÄ{'‚îÄ' * 50}‚îÄ‚î§{Colors.RESET}")
            
            # Hi·ªÉn th·ªã danh s√°ch file
            for i, file in enumerate(self.available_files, 1):
                config = self.file_configs[file]
                print(f"{Colors.BLUE}‚îÇ{Colors.RESET} {Colors.CYAN}{i}.{Colors.RESET} {Colors.WHITE}{config['name']}{Colors.RESET}".ljust(65) + f"{Colors.BLUE}‚îÇ{Colors.RESET}")
            
            print(f"{Colors.BLUE}‚îÇ{Colors.RESET} {Colors.RED}0.{Colors.RESET} {Colors.WHITE}Quay l·∫°i{Colors.RESET}".ljust(65) + f"{Colors.BLUE}‚îÇ{Colors.RESET}")
            print(f"{Colors.BLUE}‚ï∞‚îÄ{'‚îÄ' * 50}‚îÄ‚ïØ{Colors.RESET}")
            
            choice = input(f"\n{Colors.YELLOW}üëâ L·ª±a ch·ªçn c·ªßa b·∫°n: {Colors.RESET}")
            
            if choice == "0":
                return None
                
            if choice.isdigit():
                idx = int(choice)
                if 1 <= idx <= len(self.available_files):
                    return self.available_files[idx-1]
            
            print(f"{Colors.RED}‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!{Colors.RESET}")

    def choose_version(self):
        """Ch·ªçn phi√™n b·∫£n game ƒë·ªÉ mod"""
        while True:
            print(f"\n{Colors.MAGENTA}‚ï≠‚îÄ{'‚îÄ' * 40}‚îÄ‚ïÆ{Colors.RESET}")
            print(f"{Colors.MAGENTA}‚îÇ{Colors.RESET} {Colors.BOLD}{Colors.YELLOW}üéÆ CH·ªåN PHI√äN B·∫¢N GAME{Colors.RESET}".center(55) + f"{Colors.MAGENTA}‚îÇ{Colors.RESET}")
            print(f"{Colors.MAGENTA}‚îú‚îÄ{'‚îÄ' * 40}‚îÄ‚î§{Colors.RESET}")
            print(f"{Colors.MAGENTA}‚îÇ{Colors.RESET} {Colors.CYAN}1.{Colors.RESET} {Colors.WHITE}Free Fire MAX{Colors.RESET}".ljust(55) + f"{Colors.MAGENTA}‚îÇ{Colors.RESET}")
            print(f"{Colors.MAGENTA}‚îÇ{Colors.RESET} {Colors.CYAN}2.{Colors.RESET} {Colors.WHITE}Free Fire Thailand{Colors.RESET}".ljust(55) + f"{Colors.MAGENTA}‚îÇ{Colors.RESET}")
            print(f"{Colors.MAGENTA}‚îÇ{Colors.RESET} {Colors.RED}0.{Colors.RESET} {Colors.WHITE}Quay l·∫°i{Colors.RESET}".ljust(55) + f"{Colors.MAGENTA}‚îÇ{Colors.RESET}")
            print(f"{Colors.MAGENTA}‚ï∞‚îÄ{'‚îÄ' * 40}‚îÄ‚ïØ{Colors.RESET}")
            
            choice = input(f"\n{Colors.YELLOW}üëâ L·ª±a ch·ªçn c·ªßa b·∫°n: {Colors.RESET}")
            
            if choice == "1":
                return "MAX"
            elif choice == "2":
                return "TH"
            elif choice == "0":
                return None
            else:
                print(f"{Colors.RED}‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!{Colors.RESET}")

    def run(self):
        """Ch·∫°y tool mod"""
        self.print_header()
        
        if not self.check_files():
            return
            
        while True:
            # Ch·ªçn file ƒë·ªÉ mod
            asset_file = self.show_file_menu()
            if asset_file is None:
                break
                
            # Ch·ªçn phi√™n b·∫£n game
            version = self.choose_version()
            if version is None:
                continue
                
            # X·ª≠ l√Ω mod
            if self.process_mod(asset_file, version):
                input(f"\n{Colors.WHITE}Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...{Colors.RESET}")

# ================== MAIN ======================
def main():
    print(f"\n{Colors.CYAN}{'‚ïê' * 60}{Colors.RESET}")
    print(f"{Colors.YELLOW}üî• NICUE MOD TOOL - FREE FIRE MODDING TOOL üî•{Colors.RESET}".center(70))
    print(f"{Colors.WHITE}Version 2.0 - Developed by Nguy·ªÖn Trung C∆∞·ªùng{Colors.RESET}".center(70))
    print(f"{Colors.CYAN}{'‚ïê' * 60}{Colors.RESET}\n")
    
    # Ki·ªÉm tra k·∫øt n·ªëi server
    try:
        requests.get(f"{API_BASE_URL}/", timeout=5)
        print(f"{Colors.GREEN}‚úÖ ƒê√£ k·∫øt n·ªëi t·ªõi server th√†nh c√¥ng!{Colors.RESET}")
    except:
        print(f"{Colors.RED}‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi server!{Colors.RESET}")
        input("Nh·∫•n Enter ƒë·ªÉ tho√°t...")
        return
    
    # Menu ch√≠nh
    while True:
        print(f"\n{Colors.BLUE}‚ï≠{'‚ïê' * 50}‚ïÆ{Colors.RESET}")
        print(f"{Colors.BLUE}‚îÇ{Colors.RESET} {Colors.BOLD}{Colors.YELLOW}üéØ MENU CH√çNH{Colors.RESET}".center(60) + f"{Colors.BLUE}‚îÇ{Colors.RESET}")
        print(f"{Colors.BLUE}‚îú{'‚ïê' * 50}‚î§{Colors.RESET}")
        print(f"{Colors.BLUE}‚îÇ{Colors.RESET} {Colors.CYAN}1.{Colors.RESET} {Colors.WHITE}L·∫•y Key Tool (Th·ªùi h·∫°n 20 ph√∫t){Colors.RESET}".ljust(58) + f"{Colors.BLUE}‚îÇ{Colors.RESET}")
        print(f"{Colors.BLUE}‚îÇ{Colors.RESET} {Colors.CYAN}2.{Colors.RESET} {Colors.WHITE}Nh·∫≠p Key & S·ª≠ D·ª•ng Tool{Colors.RESET}".ljust(58) + f"{Colors.BLUE}‚îÇ{Colors.RESET}")
        print(f"{Colors.BLUE}‚îÇ{Colors.RESET} {Colors.RED}0.{Colors.RESET} {Colors.WHITE}Tho√°t Tool{Colors.RESET}".ljust(58) + f"{Colors.BLUE}‚îÇ{Colors.RESET}")
        print(f"{Colors.BLUE}‚ï∞{'‚ïê' * 50}‚ïØ{Colors.RESET}")
        
        choice = input(f"\n{Colors.YELLOW}üëâ Nh·∫≠p l·ª±a ch·ªçn c·ªßa b·∫°n: {Colors.RESET}").strip()
        
        if choice == "1":
            # L·∫•y key m·ªõi
            print(f"\n{Colors.CYAN}‚è≥ ƒêang t·∫°o link l·∫•y key...{Colors.RESET}")
            link = get_key_link()
            input(f"\n{Colors.GREEN}‚úÖ Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...{Colors.RESET}")
            
        elif choice == "2":
            # Nh·∫≠p v√† verify key
            print(f"\n{Colors.YELLOW}üîë Vui l√≤ng nh·∫≠p key ƒë·ªÉ s·ª≠ d·ª•ng tool:{Colors.RESET}")
            key = input(f"{Colors.CYAN}üëâ Nh·∫≠p key: {Colors.RESET}").strip()
            
            if check_key(key):
                tool = NiCueModTool()
                tool.run()
            else:
                input(f"\n{Colors.RED}‚ùå Nh·∫•n Enter ƒë·ªÉ th·ª≠ l·∫°i...{Colors.RESET}")
                
        elif choice == "0":
            print(f"\n{Colors.GREEN}üëã C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng tool!{Colors.RESET}")
            break
            
        else:
            print(f"\n{Colors.RED}‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!{Colors.RESET}")
        
        if choice == "1":
            # T·∫°o v√† hi·ªÉn th·ªã link l·∫•y key
            get_key_link()
            input(f"\n{Colors.WHITE}Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...{Colors.RESET}")
            
        elif choice == "2":
            # Nh·∫≠p key v√† v√†o tool
            print(f"\n{Colors.CYAN}‚ïî{'‚ïê' * 40}‚ïó{Colors.RESET}")
            print(f"{Colors.CYAN}‚ïë{Colors.RESET} {Colors.BOLD}{Colors.YELLOW}üîë NH·∫¨P KEY TOOL{Colors.RESET}".center(50) + f"{Colors.CYAN}‚ïë{Colors.RESET}")
            print(f"{Colors.CYAN}‚ïö{'‚ïê' * 40}‚ïù{Colors.RESET}")
            
            key = input(f"{Colors.YELLOW}üîë Nh·∫≠p key ho·∫∑c link ƒë√£ v∆∞·ª£t: {Colors.RESET}").strip()

            if not key:
                print(f"{Colors.RED}‚ùå Vui l√≤ng nh·∫≠p key!{Colors.RESET}")
                continue
            
            print(f"{Colors.YELLOW}‚è≥ ƒêang x√°c th·ª±c key...{Colors.RESET}")
            
            if not check_key(key):
                print(f"\n{Colors.RED}‚ïî{'‚ïê' * 45}‚ïó{Colors.RESET}")
                print(f"{Colors.RED}‚ïë{Colors.RESET} {Colors.BOLD}{Colors.WHITE}‚ùå KEY KH√îNG H·ª¢P L·ªÜ!{Colors.RESET}".center(55) + f"{Colors.RED}‚ïë{Colors.RESET}")
                print(f"{Colors.RED}‚ï†{'‚ïê' * 45}‚ï£{Colors.RESET}")
                print(f"{Colors.RED}‚ïë{Colors.RESET} {Colors.WHITE}‚Ä¢ Key c√≥ th·ªÉ ƒë√£ h·∫øt h·∫°n{Colors.RESET}".ljust(55) + f"{Colors.RED}‚ïë{Colors.RESET}")
                print(f"{Colors.RED}‚ïë{Colors.RESET} {Colors.WHITE}‚Ä¢ Key kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng{Colors.RESET}".ljust(55) + f"{Colors.RED}‚ïë{Colors.RESET}")
                print(f"{Colors.RED}‚ïë{Colors.RESET} {Colors.WHITE}‚Ä¢ B·∫°n ch∆∞a v∆∞·ª£t link ƒë·ªÉ l·∫•y key{Colors.RESET}".ljust(55) + f"{Colors.RED}‚ïë{Colors.RESET}")
                print(f"{Colors.RED}‚ïö{'‚ïê' * 45}‚ïù{Colors.RESET}")
                
                input(f"\n{Colors.WHITE}Nh·∫•n Enter ƒë·ªÉ th·ª≠ l·∫°i...{Colors.RESET}")
                continue

            print(f"\n{Colors.GREEN}‚ïî{'‚ïê' * 35}‚ïó{Colors.RESET}")
            print(f"{Colors.GREEN}‚ïë{Colors.RESET} {Colors.BOLD}{Colors.YELLOW}‚úÖ X√ÅC TH·ª∞C TH√ÄNH C√îNG!{Colors.RESET}".center(45) + f"{Colors.GREEN}‚ïë{Colors.RESET}")
            print(f"{Colors.GREEN}‚ïë{Colors.RESET} {Colors.WHITE}ƒêang kh·ªüi ƒë·ªông tool...{Colors.RESET}".center(45) + f"{Colors.GREEN}‚ïë{Colors.RESET}")
            print(f"{Colors.GREEN}‚ïö{'‚ïê' * 35}‚ïù{Colors.RESET}")
            
            # Kh·ªüi ƒë·ªông tool ch√≠nh
            try:
                tool = NiCueModTool()
                tool.run()
                break
            except KeyboardInterrupt:
                print(f"\n\n{Colors.YELLOW}üëã C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng NiCue Mod Tool!{Colors.RESET}")
                break
            except Exception as e:
                print(f"\n{Colors.RED}‚ùå L·ªói kh√¥ng mong mu·ªën: {str(e)}{Colors.RESET}")
                input(f"{Colors.WHITE}Nh·∫•n Enter ƒë·ªÉ quay l·∫°i menu...{Colors.RESET}")
                continue
                
        elif choice == "0":
            print(f"\n{Colors.YELLOW}üëã C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng NiCue Mod Tool!{Colors.RESET}")
            break
            
        else:
            print(f"{Colors.RED}‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá! Vui l√≤ng ch·ªçn 0, 1 ho·∫∑c 2{Colors.RESET}")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\nüëã Tho√°t tool.")