from flask import Flask, request, jsonify
from flask_cors import CORS
from flask_limiter import Limiter
from flask_limiter.util import get_remote_address
from pymongo import MongoClient
import jwt
import hashlib
import uuid
from datetime import datetime, timedelta
import os
from functools import wraps

app = Flask(__name__)
CORS(app)

# C·∫•u h√¨nh b·∫£o m·∫≠t
SECRET_KEY = os.environ.get('SECRET_KEY', 'your-secret-key')
MONGO_URI = os.environ.get('MONGODB_URI', 'your-mongodb-uri')
JWT_SECRET = os.environ.get('JWT_SECRET', 'your-jwt-secret')

# K·∫øt n·ªëi MongoDB
client = MongoClient(MONGO_URI)
db = client.keydb
keys_collection = db.keys
blacklist_collection = db.blacklist

# Rate limiting ƒë·ªÉ ch·ªëng DDoS
limiter = Limiter(
    app,
    key_func=get_remote_address,
    default_limits=["200 per day", "50 per hour"]
)

# Middleware b·∫£o m·∫≠t
def security_check(f):
    @wraps(f)
    def decorated(*args, **kwargs):
        ip = request.remote_addr
        
        # Ki·ªÉm tra IP c√≥ trong blacklist
        if blacklist_collection.find_one({"ip": ip}):
            return jsonify({"status": "error", "message": "IP ƒë√£ b·ªã ch·∫∑n"}), 403
        
        # Ki·ªÉm tra User-Agent
        user_agent = request.headers.get('User-Agent', '')
        if not user_agent or 'python-requests' in user_agent.lower():
            blacklist_collection.insert_one({"ip": ip, "reason": "Invalid User-Agent"})
            return jsonify({"status": "error", "message": "Access denied"}), 403
            
        return f(*args, **kwargs)
    return decorated

# Trang ch·ªß
@app.route('/')
def home():
    return """
    <html>
    <head>
        <title>NiCue Mod Key System</title>
        <style>
            body {
                font-family: Arial, sans-serif;
                margin: 0;
                padding: 20px;
                background: #1a1a1a;
                color: #fff;
            }
            .container {
                max-width: 800px;
                margin: 0 auto;
                background: #2d2d2d;
                padding: 20px;
                border-radius: 10px;
                box-shadow: 0 0 10px rgba(0,0,0,0.5);
            }
            h1 {
                color: #00ff00;
                text-align: center;
                margin-bottom: 30px;
            }
            .info {
                background: #3d3d3d;
                padding: 15px;
                border-radius: 5px;
                margin-bottom: 15px;
            }
            .warning {
                color: #ff3333;
                font-weight: bold;
            }
            .success {
                color: #00ff00;
            }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>üîê NiCue Mod Key System</h1>
            <div class="info">
                <h3>‚ö° Tr·∫°ng th√°i: <span class="success">Ho·∫°t ƒë·ªông</span></h3>
                <p>‚Ä¢ Server key ƒëang ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng</p>
                <p>‚Ä¢ Th·ªùi h·∫°n key: 20 ph√∫t</p>
                <p>‚Ä¢ Ch·∫ø ƒë·ªô b·∫£o m·∫≠t: ƒêang b·∫≠t</p>
            </div>
            <div class="info warning">
                <h3>‚ö†Ô∏è L∆∞u √Ω:</h3>
                <p>‚Ä¢ Vui l√≤ng s·ª≠ d·ª•ng tool ch√≠nh th·ª©c ƒë·ªÉ l·∫•y key</p>
                <p>‚Ä¢ Kh√¥ng chia s·∫ª ho·∫∑c b√°n l·∫°i key</p>
                <p>‚Ä¢ M·ªói key ch·ªâ s·ª≠ d·ª•ng ƒë∆∞·ª£c tr√™n 1 m√°y</p>
            </div>
            <div class="info">
                <h3>üìû Li√™n h·ªá h·ªó tr·ª£:</h3>
                <p>‚Ä¢ Zalo: 0349667922</p>
                <p>‚Ä¢ Youtube: NiCue Mod</p>
            </div>
        </div>
    </body>
    </html>
    """

# Trang hi·ªÉn th·ªã key
@app.route('/key/')
def show_key():
    key = request.args.get('key')
    if not key:
        return "Key kh√¥ng h·ª£p l·ªá!", 400
        
    return f"""
    <html>
    <head>
        <title>Key NiCue Mod</title>
        <style>
            body {{
                font-family: Arial, sans-serif;
                margin: 0;
                padding: 20px;
                background: #1a1a1a;
                color: #fff;
            }}
            .container {{
                max-width: 800px;
                margin: 0 auto;
                background: #2d2d2d;
                padding: 20px;
                border-radius: 10px;
                box-shadow: 0 0 10px rgba(0,0,0,0.5);
            }}
            h1 {{
                color: #00ff00;
                text-align: center;
                margin-bottom: 30px;
            }}
            .key-box {{
                background: #3d3d3d;
                padding: 20px;
                border-radius: 5px;
                margin: 20px 0;
                text-align: center;
            }}
            .key {{
                font-size: 18px;
                color: #00ff00;
                word-break: break-all;
                font-family: monospace;
            }}
            .timer {{
                font-size: 24px;
                color: #ff3333;
                margin: 20px 0;
            }}
            .info {{
                background: #3d3d3d;
                padding: 15px;
                border-radius: 5px;
                margin-bottom: 15px;
            }}
        </style>
        <script>
            function startTimer(duration, display) {{
                var timer = duration, minutes, seconds;
                setInterval(function () {{
                    minutes = parseInt(timer / 60, 10);
                    seconds = parseInt(timer % 60, 10);

                    minutes = minutes < 10 ? "0" + minutes : minutes;
                    seconds = seconds < 10 ? "0" + seconds : seconds;

                    display.textContent = minutes + ":" + seconds;

                    if (--timer < 0) {{
                        display.textContent = "H·∫æT H·∫†N!";
                    }}
                }}, 1000);
            }}

            window.onload = function () {{
                var twentyMinutes = 60 * 20,
                    display = document.querySelector('#time');
                startTimer(twentyMinutes, display);
            }};
        </script>
    </head>
    <body>
        <div class="container">
            <h1>üîë Key NiCue Mod</h1>
            <div class="key-box">
                <h3>Key c·ªßa b·∫°n:</h3>
                <p class="key">{key}</p>
            </div>
            <div class="info">
                <h3>‚è∞ Th·ªùi gian c√≤n l·∫°i:</h3>
                <p class="timer"><span id="time">20:00</span></p>
            </div>
            <div class="info">
                <h3>üìã H∆∞·ªõng d·∫´n:</h3>
                <p>1. Copy key ·ªü tr√™n</p>
                <p>2. M·ªü tool NiCue Mod</p>
                <p>3. Ch·ªçn "Nh·∫≠p Key & S·ª≠ D·ª•ng Tool"</p>
                <p>4. D√°n key v√†o v√† nh·∫•n Enter</p>
            </div>
            <div class="info">
                <h3>‚ö†Ô∏è L∆∞u √Ω:</h3>
                <p>‚Ä¢ Key ch·ªâ c√≥ hi·ªáu l·ª±c trong 20 ph√∫t</p>
                <p>‚Ä¢ Key ch·ªâ s·ª≠ d·ª•ng ƒë∆∞·ª£c tr√™n 1 m√°y</p>
                <p>‚Ä¢ Kh√¥ng chia s·∫ª key cho ng∆∞·ªùi kh√°c</p>
            </div>
        </div>
    </body>
    </html>
    """

# T·∫°o key m·ªõi
@app.route('/generate', methods=['POST'])
@limiter.limit("3/minute")
@security_check
def generate_key():
    try:
        # Ki·ªÉm tra Link4m token
        token = request.args.get('token')
        if not token:
            return jsonify({
                "status": "error",
                "code": "LINK4M_REQUIRED",
                "message": "Vui l√≤ng v∆∞·ª£t link ƒë·ªÉ l·∫•y key"
            }), 400
            
        # T·∫°o key m·ªõi v·ªõi JWT
        ip = request.remote_addr
        hardware_id = request.headers.get('X-Hardware-ID')
        
        key_data = {
            "key_id": str(uuid.uuid4()),
            "ip": ip,
            "hardware_id": hardware_id,
            "created_at": datetime.utcnow(),
            "expires_at": datetime.utcnow() + timedelta(minutes=20)
        }
        
        # M√£ h√≥a key
        encoded_key = jwt.encode(key_data, JWT_SECRET, algorithm='HS256')
        
        # L∆∞u v√†o database
        key_data['key'] = encoded_key
        keys_collection.insert_one(key_data)
        
        # Tr·∫£ v·ªÅ key v·ªõi giao di·ªán ƒë·∫πp
        return jsonify({
            "status": "success",
            "key": encoded_key,
            "expires_in": "20 minutes",
            "message": "Key ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!"
        })
        
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)}), 500

# X√°c th·ª±c key
@app.route('/verify', methods=['POST'])
@limiter.limit("10/minute")
@security_check
def verify_key():
    try:
        data = request.get_json()
        key = data.get('key')
        
        if not key:
            return jsonify({
                "status": "error",
                "message": "Kh√¥ng t√¨m th·∫•y key"
            }), 400
            
        # Gi·∫£i m√£ v√† x√°c th·ª±c JWT
        try:
            key_data = jwt.decode(key, JWT_SECRET, algorithms=['HS256'])
        except jwt.ExpiredSignatureError:
            return jsonify({
                "status": "error",
                "message": "Key ƒë√£ h·∫øt h·∫°n"
            }), 400
        except jwt.InvalidTokenError:
            return jsonify({
                "status": "error",
                "message": "Key kh√¥ng h·ª£p l·ªá"
            }), 400
            
        # Ki·ªÉm tra trong database
        stored_key = keys_collection.find_one({"key_id": key_data['key_id']})
        if not stored_key:
            return jsonify({
                "status": "error",
                "message": "Key kh√¥ng t·ªìn t·∫°i"
            }), 400
            
        # Ki·ªÉm tra IP
        current_ip = request.remote_addr
        if stored_key['ip'] != current_ip:
            blacklist_collection.insert_one({
                "ip": current_ip,
                "reason": "IP mismatch attempt",
                "key_id": key_data['key_id']
            })
            return jsonify({
                "status": "error",
                "message": "Key kh√¥ng th·ªÉ s·ª≠ d·ª•ng tr√™n IP n√†y"
            }), 403
            
        # Ki·ªÉm tra hardware ID n·∫øu c√≥
        current_hw_id = request.headers.get('X-Hardware-ID')
        if current_hw_id and stored_key['hardware_id'] != current_hw_id:
            return jsonify({
                "status": "error",
                "message": "Key kh√¥ng th·ªÉ s·ª≠ d·ª•ng tr√™n thi·∫øt b·ªã n√†y"
            }), 403
            
        # T√≠nh th·ªùi gian c√≤n l·∫°i
            expires_at = stored_key['expires_at']
            remaining = (expires_at - datetime.utcnow()).total_seconds()
        
        if remaining <= 0:
            return jsonify({
                "status": "error",
                "message": "Key ƒë√£ h·∫øt h·∫°n"
            }), 400
            
        return jsonify({
            "status": "ok",
            "expires_in": int(remaining),
            "message": "Key h·ª£p l·ªá"
        })
        
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)}), 500

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=int(os.environ.get('PORT', 5000)))