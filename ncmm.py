#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import sys
import requests
from PIL import Image
import UnityPy

# ================= KEY VERIFY ==================
SERVER_URL = "http://127.0.0.1:5000"

def check_key(key: str) -> bool:
    try:
        resp = requests.get(f"{SERVER_URL}/verify/{key}", timeout=5)
        data = resp.json()
        return data.get("status") == "ok"
    except Exception as e:
        print("‚ùå Kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c server:", e)
        return False

# ================== M√ÄU S·∫ÆC ===================
class Colors:
    RED = "\033[91m"; GREEN = "\033[92m"; YELLOW = "\033[93m"
    BLUE = "\033[94m"; MAGENTA = "\033[95m"; CYAN = "\033[96m"
    WHITE = "\033[97m"; RESET = "\033[0m"; BOLD = "\033[1m"; DIM = "\033[2m"

# ================== TOOL MOD ==================
#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import sys
from PIL import Image
import UnityPy

# M√†u s·∫Øc cho terminal
class Colors:
    RED = "\033[91m"
    GREEN = "\033[92m"
    YELLOW = "\033[93m"
    BLUE = "\033[94m"
    MAGENTA = "\033[95m"
    CYAN = "\033[96m"
    WHITE = "\033[97m"
    RESET = "\033[0m"
    BOLD = "\033[1m"
    DIM = "\033[2m"

class NiCueModTool:
    def __init__(self):
        # C·∫•u h√¨nh t·∫•t c·∫£ file v·ªõi t√™n m·ªõi v√† texture
        self.file_configs = {
            "optionalab_weapon_068.taWKWMEe462YVhaYmP6~2Fq07NIV8~3D": {
                "name": "File Truy·ªán Tranh & C√¥n Tr√πng",
                "textures": [
                    "IceWall_Bunker_New_Rank44_D",
                    "IceWall_Bunker_New_CSRank30_D"
                ],
                "max_name": "optionalab_weapon_068.wK6Wcwor2D8pjjzCkSIAPIldo7c~3D"
            },
            "optionalab_weapon_038.xn3C2MskfGbGot82Dz2fJQ54M4g~3D": {
                "name": "Keo Tanjiro",
                "textures": ["IceWall_Bunker_New_DS_green_D"],
                "max_name": "optionalab_weapon_038.dYO4hfQMcF~2BGYHqQxLGGsRnIGys~3D"
            },
            "optionalab_weapon_058.lFsWlMele5d4X5aw6RBLchSdjgo~3D": {
                "name": "Keo Booya",
                "textures": ["IceWall_Bunker_New_Booyahday24_Team_D"],
                "max_name": "optionalab_weapon_058.hxAcEvqNDnVv0ahYZtQ7rBQhPgc~3D"
            },
            "optionalab_weapon_054.PZEaSpjxrnFlozy~2Bs9hos3qj6xo~3D": {
                "name": "Keo 7 Tu·ªïi",
                "textures": ["IceWall_Bunker_New_Spirit24_D"],
                "max_name": "optionalab_weapon_054.RTLN0jSaLvRttCJ2g8DS8uPx7NQ~3D"
            },
            "optionalab_weapon_060.k18kfeCBi8x8CHn~2B5l9tBrYEcRM~3D": {
                "name": "Keo H√† M√£",
                "textures": ["IceWall_Bunker_New_Hippo_D"],
                "max_name": "optionalab_weapon_060.MmoGsHpdq5URHWzr4AL3F~2F9hBmY~3D"
            }
        }
        
        # ƒê∆∞·ªùng d·∫´n game
        self.game_paths = {
            "TH": "com.dts.freefireth\\com.dts.freefireth\\files\\contentcache\\Optional\\android\\gameassetbundles",
            "MAX": "com.dts.freefiremax\\files\\contentcache\\Optional\\android\\gameassetbundles"
        }
        
        # Qu√©t file c√≥ s·∫µn
        self.available_files = [f for f in self.file_configs if os.path.exists(f)]
        
    def print_header(self):
        """In header tool v·ªõi giao di·ªán ƒë·∫πp"""
        print(Colors.CYAN + "‚ïî" + "‚ïê" * 58 + "‚ïó" + Colors.RESET)
        print(Colors.CYAN + "‚ïë" + Colors.YELLOW + Colors.BOLD + 
              "üî• NICUE MOD TOOL - FREE FIRE MODDING üî•".center(58) + 
              Colors.RESET + Colors.CYAN + "‚ïë" + Colors.RESET)
        print(Colors.CYAN + "‚ïë" + Colors.WHITE + 
              "C√¥ng c·ª• mod Free Fire chuy√™n nghi·ªáp".center(58) + 
              Colors.RESET + Colors.CYAN + "‚ïë" + Colors.RESET)
        print(Colors.CYAN + "‚ïë" + Colors.MAGENTA + 
              "¬© 2024 NiCue Mod - All Rights Reserved".center(58) + 
              Colors.RESET + Colors.CYAN + "‚ïë" + Colors.RESET)
        print(Colors.CYAN + "‚ïö" + "‚ïê" * 58 + "‚ïù" + Colors.RESET)
        
    def check_files(self):
        """Ki·ªÉm tra file c√≥ s·∫µn"""
        if not self.available_files:
            print("\n" + Colors.RED + "‚ùå KH√îNG T√åM TH·∫§Y FILE N√ÄO!" + Colors.RESET)
            print(Colors.YELLOW + "üìÅ H√£y ƒë·∫∑t file asset v√†o c√πng th∆∞ m·ª•c v·ªõi tool!" + Colors.RESET)
            print(Colors.DIM + "\nDanh s√°ch file c·∫ßn c√≥:" + Colors.RESET)
            for filename, config in self.file_configs.items():
                print(f"  ‚Ä¢ {Colors.CYAN}{config['name']}{Colors.RESET}: {Colors.DIM}{filename}{Colors.RESET}")
            input(Colors.WHITE + "\nNh·∫•n Enter ƒë·ªÉ tho√°t..." + Colors.RESET)
            sys.exit(1)
            
        print(f"\n{Colors.GREEN}‚úÖ T√¨m th·∫•y {len(self.available_files)} file c√≥ th·ªÉ mod!{Colors.RESET}")

    def show_file_menu(self):
        """Hi·ªÉn th·ªã menu ch·ªçn file v·ªõi giao di·ªán ƒë·∫πp"""
        print("\n" + Colors.BLUE + "‚ï≠‚îÄ" + "‚îÄ" * 40 + "‚îÄ‚ïÆ" + Colors.RESET)
        print(Colors.BLUE + "‚îÇ" + Colors.BOLD + Colors.YELLOW + 
              "üìã CH·ªåN FILE MU·ªêN MOD".center(42) + 
              Colors.RESET + Colors.BLUE + "‚îÇ" + Colors.RESET)
        print(Colors.BLUE + "‚îú‚îÄ" + "‚îÄ" * 40 + "‚îÄ‚î§" + Colors.RESET)
        
        for i, filename in enumerate(self.available_files, 1):
            config = self.file_configs[filename]
            texture_count = len(config['textures'])
            
            print(Colors.BLUE + "‚îÇ" + 
                  f"{Colors.CYAN}{i:>2}.{Colors.RESET} " +
                  f"{Colors.WHITE}{config['name']:<25}{Colors.RESET} " +
                  f"{Colors.DIM}({texture_count} texture){Colors.RESET}".ljust(15) +
                  Colors.BLUE + "‚îÇ" + Colors.RESET)
        
        print(Colors.BLUE + "‚îÇ" + 
              f"{Colors.RED}{0:>2}.{Colors.RESET} " +
              f"{Colors.WHITE}{'Tho√°t':<35}{Colors.RESET}" +
              Colors.BLUE + "‚îÇ" + Colors.RESET)
        print(Colors.BLUE + "‚ï∞‚îÄ" + "‚îÄ" * 40 + "‚îÄ‚ïØ" + Colors.RESET)
        
        while True:
            choice = input(f"\n{Colors.YELLOW}üëâ L·ª±a ch·ªçn c·ªßa b·∫°n: {Colors.RESET}").strip()
            
            if choice == "0":
                print(f"{Colors.YELLOW}üëã C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng NiCue Mod Tool!{Colors.RESET}")
                sys.exit(0)
                
            try:
                choice_num = int(choice)
                if 1 <= choice_num <= len(self.available_files):
                    return self.available_files[choice_num - 1]
                else:
                    print(f"{Colors.RED}‚ùå Vui l√≤ng ch·ªçn t·ª´ 0 ƒë·∫øn {len(self.available_files)}!{Colors.RESET}")
            except ValueError:
                print(f"{Colors.RED}‚ùå Vui l√≤ng nh·∫≠p s·ªë!{Colors.RESET}")

    def choose_version(self):
        """Ch·ªçn phi√™n b·∫£n Free Fire"""
        print("\n" + Colors.MAGENTA + "‚ï≠‚îÄ" + "‚îÄ" * 35 + "‚îÄ‚ïÆ" + Colors.RESET)
        print(Colors.MAGENTA + "‚îÇ" + Colors.BOLD + Colors.YELLOW + 
              "üì± CH·ªåN PHI√äN B·∫¢N GAME".center(37) + 
              Colors.RESET + Colors.MAGENTA + "‚îÇ" + Colors.RESET)
        print(Colors.MAGENTA + "‚îú‚îÄ" + "‚îÄ" * 35 + "‚îÄ‚î§" + Colors.RESET)
        print(Colors.MAGENTA + "‚îÇ" + 
              f"{Colors.CYAN}1.{Colors.RESET} {Colors.GREEN}Free Fire TH{Colors.RESET}" +
              f"{Colors.DIM} (T√™n file g·ªëc){Colors.RESET}".ljust(15) +
              Colors.MAGENTA + "‚îÇ" + Colors.RESET)
        print(Colors.MAGENTA + "‚îÇ" + 
              f"{Colors.CYAN}2.{Colors.RESET} {Colors.BLUE}Free Fire MAX{Colors.RESET}" +
              f"{Colors.DIM} (ƒê·ªïi t√™n file){Colors.RESET}".ljust(14) +
              Colors.MAGENTA + "‚îÇ" + Colors.RESET)
        print(Colors.MAGENTA + "‚ï∞‚îÄ" + "‚îÄ" * 35 + "‚îÄ‚ïØ" + Colors.RESET)
        
        while True:
            choice = input(f"\n{Colors.YELLOW}üëâ Ch·ªçn phi√™n b·∫£n: {Colors.RESET}").strip()
            if choice == "1":
                print(f"{Colors.GREEN}‚úÖ ƒê√£ ch·ªçn: Free Fire TH{Colors.RESET}")
                return "TH"
            elif choice == "2":
                print(f"{Colors.BLUE}‚úÖ ƒê√£ ch·ªçn: Free Fire MAX{Colors.RESET}")
                return "MAX"
            else:
                print(f"{Colors.RED}‚ùå Vui l√≤ng ch·ªçn 1 ho·∫∑c 2!{Colors.RESET}")

    def list_images_in_folder(self):
        """Li·ªát k√™ ·∫£nh trong th∆∞ m·ª•c images"""
        img_dir = "images"
        if not os.path.exists(img_dir):
            os.makedirs(img_dir)
            print(f"{Colors.YELLOW}üìÅ ƒê√£ t·∫°o th∆∞ m·ª•c 'images' ƒë·ªÉ b·∫°n c√≥ th·ªÉ b·ªè ·∫£nh v√†o{Colors.RESET}")
            
        image_files = []
        for file in os.listdir(img_dir):
            if file.lower().endswith(('.png', '.jpg', '.jpeg', '.bmp', '.gif')):
                image_files.append(os.path.join(img_dir, file))
        
        return image_files

    def get_image_path(self, texture_name):
        """L·∫•y ƒë∆∞·ªùng d·∫´n ·∫£nh v·ªõi giao di·ªán ƒë·∫πp"""
        print(f"\n{Colors.BLUE}‚ï≠‚îÄ{'‚îÄ' * 50}‚îÄ‚ïÆ{Colors.RESET}")
        print(f"{Colors.BLUE}‚îÇ{Colors.RESET} {Colors.BOLD}{Colors.YELLOW}üé® CH·ªåN ·∫¢NH CHO: {texture_name}{Colors.RESET}".ljust(65) + f"{Colors.BLUE}‚îÇ{Colors.RESET}")
        print(f"{Colors.BLUE}‚îú‚îÄ{'‚îÄ' * 50}‚îÄ‚î§{Colors.RESET}")
        print(f"{Colors.BLUE}‚îÇ{Colors.RESET} {Colors.CYAN}‚Ä¢ K√©o th·∫£ ·∫£nh v√†o ƒë√¢y{Colors.RESET}".ljust(60) + f"{Colors.BLUE}‚îÇ{Colors.RESET}")
        print(f"{Colors.BLUE}‚îÇ{Colors.RESET} {Colors.CYAN}‚Ä¢ Ho·∫∑c nh·∫≠p ƒë∆∞·ªùng d·∫´n ƒë·∫ßy ƒë·ªß{Colors.RESET}".ljust(60) + f"{Colors.BLUE}‚îÇ{Colors.RESET}")
        
        # Hi·ªÉn th·ªã ·∫£nh trong th∆∞ m·ª•c images n·∫øu c√≥
        images = self.list_images_in_folder()
        if images:
            print(f"{Colors.BLUE}‚îÇ{Colors.RESET} {Colors.CYAN}‚Ä¢ Ho·∫∑c ch·ªçn t·ª´ th∆∞ m·ª•c /images/:{Colors.RESET}".ljust(60) + f"{Colors.BLUE}‚îÇ{Colors.RESET}")
            print(f"{Colors.BLUE}‚îú‚îÄ{'‚îÄ' * 50}‚îÄ‚î§{Colors.RESET}")
            
            for i, img_path in enumerate(images, 1):
                img_name = os.path.basename(img_path)
                if len(img_name) > 35:
                    img_name = img_name[:32] + "..."
                print(f"{Colors.BLUE}‚îÇ{Colors.RESET} {Colors.YELLOW}{i:>2}.{Colors.RESET} {Colors.WHITE}{img_name}{Colors.RESET}".ljust(60) + f"{Colors.BLUE}‚îÇ{Colors.RESET}")
        
        print(f"{Colors.BLUE}‚ï∞‚îÄ{'‚îÄ' * 50}‚îÄ‚ïØ{Colors.RESET}")
        
        while True:
            path = input(f"\n{Colors.YELLOW}üëâ ƒê∆∞·ªùng d·∫´n ho·∫∑c s·ªë th·ª© t·ª±: {Colors.RESET}").strip().strip('"\'')
            
            # Ki·ªÉm tra n·∫øu l√† s·ªë th·ª© t·ª±
            if path.isdigit() and images:
                try:
                    index = int(path) - 1
                    if 0 <= index < len(images):
                        selected_path = images[index]
                        print(f"{Colors.GREEN}‚úÖ ƒê√£ ch·ªçn: {os.path.basename(selected_path)}{Colors.RESET}")
                        return selected_path
                    else:
                        print(f"{Colors.RED}‚ùå S·ªë th·ª© t·ª± kh√¥ng h·ª£p l·ªá! Ch·ªçn t·ª´ 1-{len(images)}{Colors.RESET}")
                        continue
                except ValueError:
                    pass
            
            # Ki·ªÉm tra ƒë∆∞·ªùng d·∫´n file
            if not path:
                print(f"{Colors.RED}‚ùå Vui l√≤ng ch·ªçn ·∫£nh!{Colors.RESET}")
                continue
                
            if not os.path.exists(path):
                print(f"{Colors.RED}‚ùå File kh√¥ng t·ªìn t·∫°i!{Colors.RESET}")
                continue
                
            if not path.lower().endswith(('.png', '.jpg', '.jpeg', '.bmp', '.gif')):
                print(f"{Colors.RED}‚ùå Ch·ªâ h·ªó tr·ª£: PNG, JPG, JPEG, BMP, GIF{Colors.RESET}")
                continue
                
            print(f"{Colors.GREEN}‚úÖ ƒê√£ ch·ªçn: {os.path.basename(path)}{Colors.RESET}")
            return path

    def optimize_image(self, image_path, target_size):
        """T·ªëi ∆∞u ·∫£nh si√™u nhanh"""
        with Image.open(image_path) as img:
            # Convert sang RGBA
            if img.mode != 'RGBA':
                if img.mode in ('RGBA', 'LA'):
                    background = Image.new('RGB', img.size, (255, 255, 255))
                    if img.mode == 'RGBA':
                        background.paste(img, mask=img.split()[-1])
                    img = background
                img = img.convert('RGBA')
            
            # Resize si√™u nhanh
            if img.size != target_size:
                method = Image.Resampling.NEAREST if img.size[0] < target_size[0] else Image.Resampling.BOX
                img = img.resize(target_size, method)
            
            return img

    def process_mod(self, asset_file, version):
        """X·ª≠ l√Ω mod v·ªõi giao di·ªán ƒë·∫πp"""
        config = self.file_configs[asset_file]
        
        print(f"\n{Colors.CYAN}‚ïî{'‚ïê' * 50}‚ïó{Colors.RESET}")
        print(f"{Colors.CYAN}‚ïë{Colors.RESET} {Colors.BOLD}{Colors.YELLOW}üîÑ ƒêANG X·ª¨ L√ù: {config['name']}{Colors.RESET}".ljust(60) + f"{Colors.CYAN}‚ïë{Colors.RESET}")
        print(f"{Colors.CYAN}‚ïö{'‚ïê' * 50}‚ïù{Colors.RESET}")
        
        try:
            # Load bundle
            print(f"{Colors.YELLOW}‚è≥ ƒêang t·∫£i asset bundle...{Colors.RESET}")
            bundle = UnityPy.load(asset_file)
            
            # X·ª≠ l√Ω t·ª´ng texture
            for i, texture_name in enumerate(config['textures'], 1):
                print(f"\n{Colors.BLUE}üìç Texture {i}/{len(config['textures'])}: {Colors.BOLD}{texture_name}{Colors.RESET}")
                
                # L·∫•y ·∫£nh thay th·∫ø
                image_path = self.get_image_path(texture_name)
                
                # T√¨m v√† thay th·∫ø texture
                texture_found = False
                for obj in bundle.objects:
                    if obj.type.name == "Texture2D":
                        data = obj.read()
                        name = getattr(data, "name", None) or getattr(data, "m_Name", None)
                        
                        if name == texture_name:
                            print(f"{Colors.YELLOW}‚ö° ƒêang t·ªëi ∆∞u ·∫£nh...{Colors.RESET}")
                            
                            # T·ªëi ∆∞u ·∫£nh
                            orig_size = (data.m_Width, data.m_Height)
                            new_img = self.optimize_image(image_path, orig_size)
                            
                            # Thay th·∫ø
                            data.image = new_img
                            data.save()
                            texture_found = True
                            
                            print(f"{Colors.GREEN}‚úÖ Thay th·∫ø {texture_name} th√†nh c√¥ng!{Colors.RESET}")
                            break
                
                if not texture_found:
                    print(f"{Colors.RED}‚ùå Kh√¥ng t√¨m th·∫•y texture: {texture_name}{Colors.RESET}")
                    return False
            
            # T·∫°o t√™n file output
            if version == "TH":
                output_name = asset_file
            else:  # MAX
                output_name = config['max_name']
            
            output_file = f"{output_name}.mod"
            
            print(f"\n{Colors.YELLOW}üíæ ƒêang l∆∞u file mod...{Colors.RESET}")
            with open(output_file, "wb") as f:
                f.write(bundle.file.save())
            
            # Hi·ªÉn th·ªã k·∫øt qu·∫£ th√†nh c√¥ng
            self.show_success_result(config['name'], output_file, version)
            return True
            
        except Exception as e:
            print(f"\n{Colors.RED}‚ùå L·ªói trong qu√° tr√¨nh mod: {str(e)}{Colors.RESET}")
            return False

    def show_success_result(self, item_name, output_file, version):
        """Hi·ªÉn th·ªã k·∫øt qu·∫£ th√†nh c√¥ng v·ªõi giao di·ªán ƒë·∫πp"""
        print(f"\n{Colors.GREEN}‚ïî{'‚ïê' * 60}‚ïó{Colors.RESET}")
        print(f"{Colors.GREEN}‚ïë{Colors.RESET} {Colors.BOLD}{Colors.YELLOW}üéâ MOD HO√ÄN T·∫§T TH√ÄNH C√îNG! üéâ{Colors.RESET}".center(70) + f"{Colors.GREEN}‚ïë{Colors.RESET}")
        print(f"{Colors.GREEN}‚ï†{'‚ïê' * 60}‚ï£{Colors.RESET}")
        print(f"{Colors.GREEN}‚ïë{Colors.RESET} {Colors.BOLD}üìÅ Item:{Colors.RESET} {Colors.WHITE}{item_name}{Colors.RESET}".ljust(70) + f"{Colors.GREEN}‚ïë{Colors.RESET}")
        print(f"{Colors.GREEN}‚ïë{Colors.RESET} {Colors.BOLD}üì± Version:{Colors.RESET} {Colors.CYAN}Free Fire {version}{Colors.RESET}".ljust(70) + f"{Colors.GREEN}‚ïë{Colors.RESET}")
        print(f"{Colors.GREEN}‚ïë{Colors.RESET} {Colors.BOLD}üíæ File:{Colors.RESET} {Colors.YELLOW}{os.path.basename(output_file)}{Colors.RESET}".ljust(70) + f"{Colors.GREEN}‚ïë{Colors.RESET}")
        print(f"{Colors.GREEN}‚ï†{'‚ïê' * 60}‚ï£{Colors.RESET}")
        print(f"{Colors.GREEN}‚ïë{Colors.RESET} {Colors.BOLD}üìÇ ƒê∆∞·ªùng d·∫´n game:{Colors.RESET}".ljust(70) + f"{Colors.GREEN}‚ïë{Colors.RESET}")
        print(f"{Colors.GREEN}‚ïë{Colors.RESET} {Colors.CYAN}{self.game_paths[version]}{Colors.RESET}".ljust(70) + f"{Colors.GREEN}‚ïë{Colors.RESET}")
        print(f"{Colors.GREEN}‚ï†{'‚ïê' * 60}‚ï£{Colors.RESET}")
        print(f"{Colors.GREEN}‚ïë{Colors.RESET} {Colors.BOLD}{Colors.MAGENTA}¬© 2024 NiCue Mod - All Rights Reserved{Colors.RESET}".center(70) + f"{Colors.GREEN}‚ïë{Colors.RESET}")
        print(f"{Colors.GREEN}‚ïö{'‚ïê' * 60}‚ïù{Colors.RESET}")

    def run(self):
        """Ch·∫°y tool ch√≠nh"""
        self.print_header()
        self.check_files()
        
        while True:
            # Ch·ªçn file
            selected_file = self.show_file_menu()
            
            # Ch·ªçn phi√™n b·∫£n
            version = self.choose_version()
            
            # X·ª≠ l√Ω mod
            if self.process_mod(selected_file, version):
                print(f"\n{Colors.BLUE}{'=' * 40}{Colors.RESET}")
                continue_choice = input(f"{Colors.YELLOW}üîÑ B·∫°n c√≥ mu·ªën mod file kh√°c kh√¥ng? (y/n): {Colors.RESET}").strip().lower()
                if continue_choice not in ['y', 'yes']:
                    break
            else:
                print(f"{Colors.RED}‚ùå Mod th·∫•t b·∫°i!{Colors.RESET}")
                input(f"{Colors.WHITE}Nh·∫•n Enter ƒë·ªÉ th·ª≠ l·∫°i...{Colors.RESET}")

def main():
    """Main function"""
    try:
        tool = NiCueModTool()
        tool.run()
    except KeyboardInterrupt:
        print(f"\n\n{Colors.YELLOW}üëã C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng NiCue Mod Tool!{Colors.RESET}")
    except Exception as e:
        print(f"\n{Colors.RED}‚ùå L·ªói kh√¥ng mong mu·ªën: {str(e)}{Colors.RESET}")
        input(f"{Colors.WHITE}Nh·∫•n Enter ƒë·ªÉ tho√°t...{Colors.RESET}")

if __name__ == "__main__":
    main()

    # üëâ gi·ªØ nguy√™n t·∫•t c·∫£ function b·∫°n ƒë√£ vi·∫øt: print_header, check_files, show_file_menu, choose_version, list_images_in_folder, get_image_path, optimize_image, process_mod, show_success_result, run

# ================= MAIN ======================
def main():
    print(Colors.CYAN + "üî• NiCue Mod Tool üî•" + Colors.RESET)
    print("=================================")
    key = input("üîë Nh·∫≠p key free (l·∫•y t·∫°i server): ").strip()

    if not check_key(key):
        print(Colors.RED + "‚ùå Key kh√¥ng h·ª£p l·ªá ho·∫∑c h·∫øt h·∫°n!" + Colors.RESET)
        sys.exit(1)

    print(Colors.GREEN + "‚úÖ Key h·ª£p l·ªá! V√†o tool..." + Colors.RESET)
    tool = NiCueModTool()
    tool.run()

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\nüëã Tho√°t tool.")
